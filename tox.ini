[tox]
package = rstcheck

minversion = 3.15.0
requires =
    tox-envlist
skip_missing_interpreters = true
ignore_basepython_conflict = true
isolated_build = true
skipsdist = false

envlist =
    package
    pre-commit
    py{310,39,38,37}
    py{310,39,38,37}-with-sphinx{2,3,4}
    py{310,39,38,37}-with-tomli


[envlists]
test = py{310,39,38,37},py{310,39,38,37}-with-sphinx{2,3,4},py{310,39,38,37}-with-tomli,coverage-all
py3.7 = py37,py37-with-sphinx{2,3,4},py37-with-tomli,coverage-all
py3.8 = py38,py38-with-sphinx{2,3,4},py38-with-tomli,coverage-all
py3.9 = py39,py39-with-sphinx{2,3,4},py39-with-tomli,coverage-all
py3.10 = py310,py310-with-sphinx{2,3,4},py310-with-tomli,package,coverage-all


[testenv]
description = basic config env
passenv =
    HOME
    CI
    CI_FORCE_COLORS_PRE_COMMIT
    CI_FORCE_COLORS_POETRY
    CI_FORCE_COLORS_PYTEST
setenv =
    PIP_DISABLE_VERSION_CHECK = 1
download = true


[testenv:pre-commit]
description = format and check the code
passenv =
    {[testenv]passenv}
    SSH_AUTH_SOCK
    SKIP
setenv =
    {[testenv]setenv}
    SKIP = {tty:identity:},{env:SKIP:}
skip_install = true
deps = pre-commit >= 2.17
commands =
    pre-commit run {posargs} \
        --all-files \
        {tty::--show-diff-on-failure} \
        {tty:--color always:{env:CI_FORCE_COLORS_PRE_COMMIT:}}


[testenv:mypy]
description = run mypy type checker
deps = mypy >=0.931
extras =
    sphinx
    toml
    testing
ignore_errors = true
commands =
    mypy src/rstcheck
    mypy tests


[testenv:pylint]
description = run pylint linter
deps = pylint >= 2.12
extras =
    sphinx
    toml
    testing
commands = pylint src/rstcheck tests


[testenv:package]
description = check sdist and wheel
skip_install = true
deps =
    poetry >= 1.1.13
    twine >= 3.3
commands =
    poetry build {tty:--ansi:{env:CI_FORCE_COLORS_POETRY:}} --no-interaction -vvv
    twine check --strict dist/*


[testenv:py{310,39,38,37}]
description = run tests with {basepython}
passenv =
    {[testenv]passenv}
    PYTEST_*
setenv =
    {[testenv]setenv}
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxinidir}/.coverage_cache/.coverage.{envname}}
extras = testing
commands =
    pytest \
        {tty:--color yes:{env:CI_FORCE_COLORS_PYTEST:}} \
        --basetemp {envtmpdir} \
        --cov {envsitepackagesdir}/{[tox]package} \
        --cov-fail-under 0 \
        --numprocesses {env:PYTEST_XDIST_N:auto} \
        {posargs:tests}
    ; python -m doctest -v README.rst rstcheck/__init__.py

[testenv:py{310,39,38,37}-with-sphinx{2,3,4}]
description = run tests with {basepython} and sphinx
passenv =
    {[testenv]passenv}
    PYTEST_*
setenv =
    {[testenv]setenv}
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxinidir}/.coverage_cache/.coverage.{envname}}
extras = testing
deps =
    sphinx2,sphinx3: jinja2<3
    sphinx2,sphinx3: markupsafe<2
    sphinx2: sphinx>=2,<3
    sphinx3: sphinx>=3,<4
    # With python 3.10 there is a failing import added in sphinx 3.5
    py310-sphinx3: sphinx>=3,<3.5
    sphinx4: sphinx>=4,<5
commands =
    pytest \
        {tty:--color yes:{env:CI_FORCE_COLORS_PYTEST:}} \
        --basetemp {envtmpdir} \
        --cov {envsitepackagesdir}/{[tox]package} \
        --cov-fail-under 0 \
        --numprocesses {env:PYTEST_XDIST_N:auto} \
        {posargs:tests}
    ; python -m doctest -v README.rst rstcheck/__init__.py

[testenv:py{310,39,38,37}-with-tomli]
description = run tests with {basepython} and tomli
passenv =
    {[testenv]passenv}
    PYTEST_*
setenv =
    {[testenv]setenv}
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxinidir}/.coverage_cache/.coverage.{envname}}
extras =
    testing
    tomli
commands =
    pytest \
        {tty:--color yes:{env:CI_FORCE_COLORS_PYTEST:}} \
        --basetemp {envtmpdir} \
        --cov {envsitepackagesdir}/{[tox]package} \
        --cov-fail-under 0 \
        --numprocesses {env:PYTEST_XDIST_N:auto} \
        {posargs:tests}
    ; python -m doctest -v README.rst rstcheck/__init__.py

[testenv:coverage-{all,merge,report}]
description =
    all,merge: combine coverage data and create xml/html reports;
    all,report: report total and diff coverage against origin/master (or DIFF_AGAINST)
envdir = {toxworkdir}/coverage
depends = py{py3,310,39,38}
passenv =
    {[testenv]passenv}
    all,report: MIN_COVERAGE
    all,report: MIN_DIFF_COVERAGE
    all,report: DIFF_AGAINST
    all,report: DIFF_RANGE_NOTATION
setenv =
    {[testenv]setenv}
    COVERAGE_FILE={toxinidir}/.coverage_cache/.coverage
skip_install = true
parallel_show_output = true
ignore_errors = true
deps =
    coverage[toml] >= 6
    coverage-conditional-plugin >= 0.5
    diff-cover
commands =
    all,merge:  coverage combine
    all,merge:  coverage xml -o {toxinidir}/.coverage_cache/coverage.xml
    all,merge:  coverage html -d {toxinidir}/.coverage_cache/htmlcov
    all,report: coverage report -m --fail-under {env:MIN_COVERAGE:0}
    all,report: diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} \
    all,report:     --ignore-staged --ignore-unstaged \
    all,report:     --fail-under {env:MIN_DIFF_COVERAGE:0} \
    all,report:     --diff-range-notation {env:DIFF_RANGE_NOTATION:..} \
    all,report:     {toxinidir}/.coverage_cache/coverage.xml
